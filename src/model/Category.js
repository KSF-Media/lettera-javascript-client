/**
 * Lettera
 * KSF Media's articles service
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version 2.0.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param id {String} 
     * @param label {String} 
     * @param type {module:model/Category.TypeEnum} 
     */
    constructor(id, label, type) { 
        
        Category.initialize(this, id, label, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, label, type) { 
        obj['id'] = id;
        obj['label'] = label;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('subcategories')) {
                obj['subcategories'] = ApiClient.convertToType(data['subcategories'], [Category]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Category.prototype['id'] = undefined;

/**
 * @member {String} label
 */
Category.prototype['label'] = undefined;

/**
 * @member {module:model/Category.TypeEnum} type
 */
Category.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Category.prototype['url'] = undefined;

/**
 * @member {Array.<module:model/Category>} subcategories
 */
Category.prototype['subcategories'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Category['TypeEnum'] = {

    /**
     * value: "feed"
     * @const
     */
    "feed": "feed",

    /**
     * value: "webview"
     * @const
     */
    "webview": "webview",

    /**
     * value: "link"
     * @const
     */
    "link": "link"
};



export default Category;

